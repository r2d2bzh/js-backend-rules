import { promises as fs } from 'fs';
import { join as path } from 'path';
import { install as jsRules, readJSONFile, extractPackageDetails } from '@r2d2bzh/js-rules';
import tweakPackageJSON from './tweak-package-json.js';
import tweakConfigurationFiles from './tweak-configuration-files/index.js';
import { findDirWith, npm } from './utils.js';

export const install = async () => {
  const { logPreamble, ...projectData } = await gatherProjectData();
  try {
    await _install({ logPreamble, ...projectData });
    console.log(logPreamble, 'successfully deployed');
  } catch (e) {
    console.error(logPreamble, 'deployment failure -', e);
    throw e;
  }
};

const gatherProjectData = async () => {
  const data = await Promise.all([jsRulesStrings(), findComponents()]);
  return data.reduce((a, d) => ({ ...a, ...d }), {});
};

const jsRulesStrings = () =>
  extractPackageDetails(import.meta.url, ({ name, version }) => ({
    logPreamble: `${name}[${version}]:`,
    editWarning: `DO NOT EDIT THIS FILE AS IT IS GENERATED BY ${name}`,
  }));

const findComponents = async () => {
  const [packages, dockerContexts] = await Promise.all(['package.json', 'Dockerfile'].map(findDirWith));
  return {
    serviceDirs: packages.filter((p) => dockerContexts.includes(p)),
    subPackages: packages.filter((p) => p !== '.'),
  };
};

const _install = async ({ logPreamble, editWarning, serviceDirs, subPackages }) => {
  await structureProject(logPreamble);
  await tweakFiles({ logPreamble, editWarning, serviceDirs, subPackages });
  await npmInstall(logPreamble)(subPackages);
};

const structureProject = async (logPreamble) => {
  await ensureProjectDirectories();
  await ensurePackageJSONfiles();
  await ensureProjectSymlinks(logPreamble);
};

const ensureProjectDirectories = () =>
  Promise.all(
    ['dev', path('helm', 'templates'), path('test', '__tests__')].map((p) => fs.mkdir(p, { recursive: true }))
  );

const ensureProjectSymlinks = (logPreamble) =>
  Promise.all(
    [[path('test', '__tests__'), '__tests__']].map(([target, p]) =>
      fs
        .unlink(p)
        .catch((e) => console.warn(logPreamble, `${p} was not unlinked (${e.message})`)) // path does not exist or is something we do not want to delete (dir...)
        .then(() => fs.symlink(target, p))
    )
  );

const ensurePackageJSONfiles = () => Promise.all(['test'].map(npm('init', '-y')));

const tweakFiles = async ({ logPreamble, editWarning, serviceDirs, subPackages }) => {
  const [projectDetails] = await Promise.all([
    readJSONFile('package.json'),
    tweakPackageJSON({ logPreamble, serviceDirs }),
  ]);
  await jsRules({
    logPreamble,
    editWarning,
    tweakConfigurationFiles: tweakConfigurationFiles({
      projectDetails,
      editWarning,
      subPackages,
      serviceDirs,
    }),
    resultLogger: {
      log: () => {},
      error: () => {},
    },
  });
};

const npmInstall = (logPreamble) => async (dirs) => {
  const results = await Promise.allSettled(
    dirs
      .map(npm('install'))
      .map((p) => p.then((l) => console.log(logPreamble, l)).catch((e) => console.error(logPreamble, e.message)))
  );
  if (results.filter((r) => r.status === 'rejected').length > 0) {
    throw new Error('npm install failed for some packages');
  }
};
