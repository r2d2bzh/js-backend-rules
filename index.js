import { promises as fs } from 'fs';
import { createRequire } from 'module';
import { join as path } from 'path';
import { install as jsRules } from '@r2d2bzh/js-rules';
import tweakPackageJSON from './tweak-package-json.js';
import tweakConfigurationFiles from './tweak-configuration-files/index.js';
import { findDirWith } from './utils.js';

// JSON import is still experimental and "--experimental-json-modules" cannot be implied
const require = createRequire(import.meta.url);

const packageJSON = require('./package.json');
const logPreamble = `${packageJSON.name}[${packageJSON.version}]:`;
const editWarning = `DO NOT EDIT THIS FILE AS IT IS GENERATED BY ${packageJSON.name}`;

export const install = async () => {
  try {
    await structureProject();
    await tweakFiles();
    console.log(logPreamble, 'successfully deployed');
  } catch (e) {
    console.error(logPreamble, 'deployment failure -', e);
  }
};

const structureProject = async () => {
  await ensureProjectDirectories();
  await ensureProjectSymlinks();
};

const ensureProjectDirectories = () =>
  Promise.all(
    ['dev', path('helm', 'templates'), path('test', '__tests__')].map((p) => fs.mkdir(p, { recursive: true }))
  );

const ensureProjectSymlinks = () =>
  Promise.all(
    [[path('test', '__tests__'), '__tests__']].map(([target, p]) =>
      fs
        .unlink(p)
        .catch((e) => console.warn(logPreamble, `${p} was not unlinked (${e.message})`)) // path does not exist or is something we do not want to delete (dir...)
        .then(() => fs.symlink(target, p))
    )
  );

const tweakFiles = async () => {
  const [packages, dockerContexts] = await Promise.all(['package.json', 'Dockerfile'].map(findDirWith(process.cwd())));
  const serviceDirs = packages.filter((p) => dockerContexts.includes(p));
  const subPackages = packages.filter((p) => p !== '.');

  await tweakPackageJSON(serviceDirs);
  await jsRules({
    logPreamble,
    editWarning,
    tweakConfigurationFiles: tweakConfigurationFiles({
      projectDetails: require(path(process.cwd(), 'package.json')),
      editWarning,
      subPackages,
      serviceDirs,
    }),
    resultLogger: {
      log: () => {},
      error: () => {},
    },
  });
};
